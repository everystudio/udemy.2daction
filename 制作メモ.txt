
目次

最初にゲームを行うしーんを新規に作成します

シーン名は[stage_1]としてください

ステージを作る
タイルマップで床を作成

layer : groundを追加する

タイルマップで地面を作るものはgroundのlayerに変更する




キャラクターを追加する

ヒエラルキーの＋ボタンをから追加します
2D Object/Sprite を追加
追加したスプライトのヒエラルキーの名前を「Player」に変更する。

インスペクターのSprite の右側のボタンを押してスプライトを選択する
walk_01のスプライトを選択
（ドラッグアンドドロップでインスペクターに直接設定してもOK）

同インスペクターに２つのコンポーネントを追加する
RigidBody2D / CapusuleCollider2D

RigidBody2Dの設定
Constrains
　FreezRotation zにチェックを入れる

CapsuleCollider2Dの設定
offset x=0 y=0
size x=0.96 y=1.76

マップの床の上にキャラを配置して、再生
床の上に着地することを確認します。

出来たら、次は左右ボタン(A/D)で左右に移動する処理を作る

---------------------------------------------------------------

PlayerController.csを作成

移動処理を追加します。

    public float move_speed = 3.0f;

        float move_x = Input.GetAxis("Horizontal");
        gameObject.GetComponent<Rigidbody2D>().velocity =
            new Vector2(
                move_x * move_speed,
                gameObject.GetComponent<Rigidbody2D>().velocity.y
                );

再生して動くことを確認する

------------------------------------------------
移動方向に対して、キャラクターの向きを補正する

PlayerControl.csに処理を追加

        if (move_x != 0.0f)
        {
            float chara_dir = 1.0f;
            if( move_x < 0.0f)
            {
                chara_dir = -1.0f;
            }
            gameObject.transform.localScale = new Vector3(
                chara_dir,
                1.0f,
                1.0f
                );
        }

二項演算子は使わない


---------------------------------------------------------------

キャラクターのアニメーション

キャラのInspectorにAnimatorのコンポーネントを追加

Window/Animation/Animationを選択
Window/Animation/Animator

ヒエラルキーのPlayerを選択

Animationビューの「To begin animation Player, create an Animation Clip」の下にあるCreateボタンを押す。

フォルダの指定を促される。
playerの画像フォルダにanimationフォルダを作る。
animationフォルダ内に入り、idle.animファイル名を指定して、保存

Animationビューのidleと書かれているプルダウンを選択
Create New Clipを選択
walk.animを保存（このとき、idle.animと同じディレクトリであると望ましい）

walkアニメーションを編集
赤い録画ボタンを押す（押せない場合はヒエラルキーのPlayerを選択してから再度トライ）

0.2秒を選択
インスペクターのSpriteRendererの画像をwalk02に変更

0.4秒を選択
インスペクターのSpriteRendererの画像をwalk03に変更

1.0秒を選択
インスペクターのSpriteRendererの画像をwalk01に変更

再生ボタンをおして、キャラクターのアニメーションが正しく動いていることを確認


------------------------------------------------
アニメーションさせるためのパラメータを渡す

スクリプト側
        // 移動量に応じてアニメーションさせる
        gameObject.GetComponent<Animator>().SetFloat("move" , Mathf.Abs(move_x));

Animator側の設定

ヒエラルキーのPlayerを選択

１パラメータを追加
AnimatorウインドのParametersを選択

+ボタンを押す（Float/Int/Bool/Triggerが選択できるボタン）
Floatを追加
名前を「move」で登録
名前を間違えた場合は選択状態でもう一度名前を左クリックするとリネームが出来ます

２．Make Transitionを作る

Animatorウインドのidleを右クリクして、Make Transitionを選択
矢印が引っ張れるようになるので、walkを選択して、２つのアニメーションをつなげる

同様にwalkからidleへのMake Transitionも作成する

3.各Transitionの設定を行う

■ idle>walk へのTransitionを選択。
インスペクターを見る

Has Exit Timeのチェックをはずす
Contidionsを追加（＋ボタンを押す）

move / Greater / 0 を設定する

■ walk>idle　へのTransitionを選択
インスペクターを見る

Has Exit Timeのチェックをはずす
Conditionsを追加(＋ボタンを押す)

move / Less / 0.1 を設定する

動かしてアニメーションすることを確認


------------------------------------------------------------------------

ゴールに触るとステージクリアの処理を追加する

ヒエラルキーに2D Object/Spriteを追加
追加したスプライトのヒエラルキー上の名前をGoalに変更

ゴールの位置を調整
床の上に面するように配置します

サンプルゲーム内では(3,-3.5,0)

注！
Sceneビュー内で配置したゴールが見えるけど、Gameビューで見えない場合があります
これは、追加したスプライトのZ座標がカメラの描画範囲外に存在している可能性がある。

他のオブジェクト（Playerなど）のZ座標と比較したり、Sceneビューの2Dモードを解除して
Z軸方向にずれが生じてないかなどを確認しましょう。


BoxCollider2Dを追加

ゴール用の当たり判定を作りたいので、インスペクター上部にある
Layerのプルダウンから、Add Layerを選択します

(番号はなんでもいいけど、今回は)
12番にgoalを追加します

goalを追加したら、ヒエラルキーのGoalを選択する
再びLayerのプルダウンを選択して、追加されたgoalを選びます

スクリプトを編集。PlayerControl.csに当たり判定の処理を追加する

    private void OnCollisionEnter2D(Collision2D collision)
    {
        string layer_name = LayerMask.LayerToName(collision.gameObject.layer);
        if (layer_name == "goal")
        {
            Debug.Log("goal!!!");
        }
    }

Collider2D系同士が接触すると当たり判定の処理が呼ばれる
今回はLayerからゴールかどうかを判別することにします。

実行して、ゴールに接触したときにデバッグログが表示されることを確認してください。

GameMainにゴールした情報を渡したい

GameMain.csスクリプトを追加する
ヒエラルキー上に空のGameObjectを追加する
追加したGameObjectの名前を「GameMain」に変更する←重要
追加したGameObjectにGameMain.csをAddComponentする（貼り付ける）

GameMain.csスクリプトを編集します。
GameMain.csに以下のメソッドを追加する。
    public void OnGoal()
    {
        Debug.Log("GameMain.OnGoal");
    }

このメソッドはGoalしたプレイヤーから呼び出す

OnGoalメソッドを呼び出す処理をPlayerControl.csに追加します

    private void OnCollisionEnter2D(Collision2D collision)
    {
        string layer_name = LayerMask.LayerToName(collision.gameObject.layer);
        if (layer_name == "goal")
        {
            Debug.Log("goal!!!");
>           GameObject.Find("GameMain").SendMessage("OnGoal");
        }
    }

GameMainという名前を持っているGameObjectに対して、OnGoalというメソッドを持っているコンポーネントが存在する場合、
この処理で外部からメソッドを呼び出すことが出来ます。

ここまで実装が出来たら、一度Unityを実行して、GameMain.OnGoalというログが表示されることを確認してください。


Goalの演出を作る

１．GOAL!!!というメッセージを表示する
２．キャラクターが喜ぶモーションを行う
３．一定時間経ったら次のステージへ移動する

１．GOAL!!!というメッセージを表示する

新しいシーンを作成
シーンの名前はui
シーンを作成したら、BuildSettingsに登録しておいてください

カメラを削除
ヒエラルキーにUI>Textを追加します

追加したtextのヒエラルキー上の名前を変更します「txtMessage」
txtMessageのインスペクターを修正します

RectTransform
PosX = 0
PosY = 0
PosZ = 0
Width = 400
Height = 60

Text
 text = ""入力している文字を消してください
Character
 Font Size = 50
Paragraph
 Alignment 中央寄せになるように指定する
Color お好みの色に変更してください

GameMain.csでuiのシーンを呼び出して、テキストを演出時に利用します
ソースファイルを開いて、以下のコードを追加してください。

using UnityEngine;
using UnityEngine.UI;   // usingという記載のある直ぐ側にこの行の内容を追加してください
using UnityEngine.SceneManagement;

StartメソッドやOnGoalメソッドは元からあるものを利用して加筆修正をしてください

    void Start()
    {
        SceneManager.LoadScene("ui", LoadSceneMode.Additive);
    }
    public void OnGoal()
    {
        Debug.Log("GameMain.OnGoal");
        GameObject.Find("txtMessage").GetComponent<Text>().text = "GOAL!!!";
    }

ここまで出来たら一度動かしてみましょう
確認項目は以下２点
１．起動直後にuiのシーンがヒエラルキーに追加される
２．ゴールに接触したら、「GOAL!!!」という文字が表示される

問題がなければプレイヤーのアニメーションを追加します。

キャラクターのアニメーション追加処理 ----------------------------

ヒエラルキーのPlayerを選択
選択された状態でAnimationビューを開く（確認する）

idleと書かれているプルダウンを開き、[Create New Clip]を選択します
walk.animやidle.animを保存している場所を指定して、「goal.anim」という名前で保存します

ここで確認
追加がうまく行われた場合、Animatorの中にgoalというステートが追加されます。
必ず追加されたことを確認してください・

正しく追加されたことを確認出来たら、アニメーションの作成を行います。
ヒエラルキーのPlayerを選択
Animationビューのアニメーションが書かれているプルダウンを選択。(手順通りの場合は、idleになっているはず)
goalに切り替える。
赤い丸ボタンを押して、編集モードに切り替えます(タイムラインが赤くなっている状態が正解です)

編集モードに入った状態で、タイムラインの選択された時間に注意をしながら、画像の差し替えを行います。
画像の差し替え方は、Playerを選択した状態のインスペクターを編集することで反映されます
今回は画像の差し替えをアニメーションとして利用するので、Sprite Rendererのスプライトを変更します

0:00 goal_01
0:30 goal_02
1:00 goal_03
2:00 goal_01

初期状態だと1:00までのアニメーションになっていますが、スクロールして2:00が見えるように操作してください。

4つの画像差し替えが出来たら、赤い丸を押して、編集ードを修了してください
編集が終わったらアニメーションが正しく再生されるかを確認します。
Animationビューの再生ボタンを押すとアニメーションが確認出来ます。

喜んでいるアニメーションが確認出来たらOK

Animationの設定ができた後は、Animatorの設定を行います。

Animatorビューを表示します。
何も表示がされない場合は、ヒエラルキーのPlayerを選択すると、編集したい内容が表示されます

今回はidleモーションからgoalモーションへ遷移する処理を実装します。

Make Transitionでidleとgoalを相互に接続します
遷移用のパラメーターを追加します。
今回はbool型の変数を使います。
bool : 変数名[goal]

変数が追加できたら、各Transitionの設定を行います。

idle>goalの操作
Has Exit Time のチェックをはずす
Conditionsの追加
goal : true

goal>idleの操作
Has Exit Time のチェックをはずす
Conditionsの追加
goal : false

アニメーションの処理はこれで完了。

次はアニメーションをさせるためのプログラムを追加します。
プログラムを追加する箇所は２つ

１．Player自身がゴールしたかどうかを知るための変数
２．Playerにゴールに到達したことを伝える処理

１の実装
PlayerControl.csに以下の変更を加えます

メンバー変数の追加
public bool is_goal;

入力処理直後にゴール中かどうかでのパラメータの補正処理を入れる
        float move_x = Input.GetAxis("Horizontal");
        if (is_goal == true) {
            move_x = 0.0f;
        }

アニメーターにパラメータを渡しているところに、is_goalのパラメータも追加する
今回はSetBoolになっていることを注意してください
        gameObject.GetComponent<Animator>().SetBool("goal", is_goal);


２の実装

GameMain.OnGoalメソッドに以下の処理を追加

        GameObject.Find("Player").GetComponent<PlayerControl>().is_goal = true;

実行して確認をしてみましょう

確認項目は
１．ゲーム開始時にPlayerキャラクラーが移動できる
２．ゴールに到達するとプレイヤーキャラクターがgoalモーションを行う
３．goalモーション中は左右での移動が出来ない

この段階で、左右への移動のみのステージが出来ました
ステージ１はこれで完成


ステージ１が出来たら、次はステージ２を作成します。
ステージ２のシーンはstage_1を複製して作成します。
stage_1を選択して、Edit>Duplicateを選んでください（ショートカットCtrl+D or Cmd+D）

名前が正しく入力されている場合、stage_2というシーンが作成されます。
シーンが作成（複製）されたら、stage_2をダブルクリック(or 右クリック＞Open)でstage_2のシーンを開いてください

stage_2が確認できたら、ステージデータを作成しましょう。

Window>2D>Tile Paletteを開く

ステージを作る
動画参照

今回は地面判定を行うためのレイヤーが必要になる

AddLayerでレイヤーを追加

// レイヤー[ground]を追加したら、Tilemapのレイヤーをgroundに変更してください

ステージ２はジャンプをしないとゴールに到達できないステージになります。
ということで、プレイヤーがジャンプを行える処理を実装します。

ジャンプの処理を実装するには以下のような処理の追加が必要になります。

プレイヤーが地面に接しているかどうかの判定（接地判定）
キー入力による、プレイヤーの上方向への力を加える処理

追加として、接地状態の場合、y軸方向の速度を０とする


接地判定を追加する

        LayerMask layer_mask = LayerMask.GetMask("ground");

        RaycastHit2D hit_ground = Physics2D.CircleCast(
            new Vector2(gameObject.transform.position.x, gameObject.transform.position.y),
            0.5f,
            new Vector2(0.0f, -1.0f),
            0.51f,
            layer_mask);

        if( hit_ground.collider != null)
        {
            is_ground = true;
        }
        else
        {
            is_ground = false;
        }

Playerのis_groundが真の場合、地面に接している
偽の場合、宙に浮いているかジャンプしているか

ジャンプの処理を追加する

        // ジャンプ処理
        if(Input.GetButtonDown("Jump"))
        {
            gameObject.GetComponent<Rigidbody2D>().AddForce(
                new Vector2(0.0f, 7.0f),
                ForceMode2D.Impulse);
        }

これでジャンプ出来るけど、何度でも入力を受け付けて上方向への力が加わってしまう。
地面からしかジャンプが出来ないようにするために、接地判定を利用する。

且つ（&&）を利用してもいいし、if文の中にif文を入れてジャンプするための処理を追加してもOK

        // ジャンプ処理
        if (Input.GetButtonDown("Jump") && is_ground)
        {
            gameObject.GetComponent<Rigidbody2D>().AddForce(
                new Vector2(0.0f, 7.0f),
                ForceMode2D.Impulse);
        }


ジャンプできることを確認します

うまくジャンプできたらゴールしてみましょう
ゴール演出が再生されるとステージ２ほぼ完成！

この段階で初めて、ステージが２つ出来たことになる。
ステージ１をクリアした後に、次のステージへ移動するための処理を追加します。

ステージの変更はシーン単位で行います。
現在のステージはGameMainの中に予め設定しておきます

GameMainにコードを追加

メンバー変数
    public int stage_id;

メソッド

    private IEnumerator LoadStage(float _fDelaySeconds , int _iStageId)
    {
        yield return new WaitForSeconds(_fDelaySeconds);

        UnityEngine.SceneManagement.SceneManager.LoadScene(string.Format("stage_{0}", _iStageId));
    }

メソッドの呼び出しを行い処理を追加

OnGoalメソッドの最後に次の命令を追加してください

        StartCoroutine(LoadStage( 3.0f , stage_id + 1 ));

----------------------------------------------------------------

ソースファイルの編集はここまで
Unityでビルドエラーが出ていないことを確認してください。

エラーが発生していない場合は、Unityでシーン「stage_1」を開いてください

ヒエラルキーのGameMainを選択して、インスペクターの値を変更します

stage_id : 1にします

セットできたら、Build Settingを開いてstage_1,stage_2をScenes in Buildに追加します
Build Settingsの開き方

ショートカットの場合、Ctrl+Shift+B(Cmd+Shift+B)で開くことが出来ます
メニューから開く場合は、File>Build Settingsから開くことが出来ます

Scenes In Build にドラッグアンドドロップでstage_1,stage_2を追加します。

追加出来たらBuild Settingsは閉じてOK！

ここまでの作業が完了したら、stage_1をクリアして、stage_2が開始されることを確認しましょう。

stage_2のstage_idの設定を行っていない場合は、stage_2をクリアするとstage_1に戻ります
こちらはstage_2のGameMainに適切なstage_idをセットしていないため、このようになります。

最終ステージのみ特殊な処理が必要になりますが、現在はこれでOK

もろもろの確認が終わったら、stage_2のstage_idをセットしてください
stage_idのセットが終わると、シーン「stage_2」を複製してstage_3を作成します

-----------------------------------------------------------------------------

stage_3の複製が行えたら、stage_3のシーンを開いて編集を行いましょう。


ステージ３は鍵を取得して、ロックを解除してからゴールを目指すステージにします

まずは完成図を参考にして、タイルマップでブロックを作成します。

マップが作成できたら、Layerにkey,lockを追加します
　→ゲームによってはこの追加するレイヤーはitemのような汎用的な名前をつけることがあります。

レイヤーが追加できたら、鍵とロックを追加します

鍵(Key)のスプライトと、ロック(Lock)のスプライトをそれぞれシーンビューの中にドラッグアンドドロップしてください
配置場所は図を参考に合わせてください。
KeyはLayerをkeyに変更してください
LockはLayerをlockに変更してください

画像の追加が行えたら、それぞれにBoxCollider2Dを追加してください。

この時点で一度実行して、KeyやLockを通り過ぎることが出来ないことを確認します。

問題がなければ、次の処理を実装していきます。

１．Keyと接触すると鍵を取得
２．鍵を取得した状態でLockに接触するとLockが消える
３．Lockを消すタイミングでKeyを１つ消耗する


KeyとPlayerがあたったかどうかを検出する処理を追加

Key.csスクリプトを追加します。
スクリプトの中には当たり判定処理を追加する必要がある。以下のメソッドを追記してください

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if( LayerMask.LayerToName( collision.gameObject.layer ) == "player")
        {
            Debug.Log(collision.gameObject.name);
        }
    }

スクリプトの追加が出来たら、一度動かして確認してみましょう。
2D用のメソッド名や引数がCollision2Dになっていることをしっかりと確認してください。

プレイヤーが鍵に触れるとログを表示するのが確認出来たら、当たり判定内の処理を次のように変更してください

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if( LayerMask.LayerToName( collision.gameObject.layer ) == "player")
        {
            GameObject.Find("GameMain").SendMessage("AddKey");
            Destroy(gameObject);
        }
    }

更新した処理で、GameMainにAddKeyというメソッドを呼び出す処理と、プレイヤーに当たると鍵が消滅する処理を追加出来ました。
スクリプトを修正したら、動かしてみて、鍵が消えることを確認しましょう。

鍵が消えることが確認できたら、次はGameMain.csの修正を行います

メンバー変数とメソッドを追加します

追加するメンバー変数
    public int key_num;

追加するメソッド
    public void AddKey()
    {
        key_num += 1;
        Debug.Log(key_num);
    }

確認のため、鍵の数を追加したタイミングで現在の所持数を表示するデバッグログを追加して一度動かしてみましょう。
（publicの変数なので、インスペクターで確認しても大丈夫です）

これで鍵の個数が増えたことが確認出来ました。

ここで一旦ゲームの内容から少し離れて、UIを作って見ましょう。
現在鍵の個数をゲーム内で確認する方法がありませんので、所持数の表示を追加したいと思います。

-----------------------------------------------------------------

uiシーンの編集を行います。
uiのシーンを開いて、以下の作業を行ってください。
メニューのGameObject>UI>Imageを追加します

AnchorPresetで左上寄せを選択
Pivot x=0 y=1
PosX=0 PosY=0
width=100 height=50
Colorを黒の半透明

追加したImageを右クリックして、UI>Image
AnchorPresetの左寄せ上下合わせを選択
Pivot x=0 y=0.5
Top 2 Bottom 2
width=50
Source Imageに鍵の画像をセットする
Preserve Aspectにチェックを入れる

追加したImageを右クリックして、UI>Text
AnchorPresetの全合わせを選択
Left52 Right 2 Top 2 Bottom 2
Alignment を中心・中心にセット
font size 32
Colorを白
テキストを x0

追加したTextのヒエラルキー上の名前を変更します
Text → txtKeyNum に変更してください

ここまでの作業を行うと、画面上に鍵の個数を知ることが出来るようになっているはず

ではスクリプトで表示する個数の制御を行いたいと思います。

stage_3シーンを開いて、GameMain.csの編集に戻ります

AddKeyのメソッドの中にUIの制御処理を追加します。

    public void AddKey()
    {
        key_num += 1;
        Debug.Log(key_num);
        GameObject.Find("txtKeyNum").GetComponent<Text>().text = string.Format("x{0}", key_num);
    }

こちらのコードが、鍵の個数を表示しているテキストの更新を行う命令になります。
追加が出来たら、ゲームを動かして確認してみましょう。
鍵を取得して、x1になれば成功です。

正しく動いたことが確認できたら、次は鍵を１つ以上持った状態で錠前に接触すると、錠前が消える処理を追加します。
追加するスクリプトは２箇所。１つはGameMain.csともう１つは錠前用のLock.csが必要になります

GameMain.csに以下のメソッドを追加します

    public bool OpenLock()
    {
        if( 0 < key_num)
        {
            key_num -= 1;
            GameObject.Find("txtKeyNum").GetComponent<Text>().text = string.Format("x{0}", key_num);
            return true;
        }
        else
        {
            return false;
        }
    }

錠前用のスクリプトLock.csを追加します
当たり判定処理として、以下のメソッドを追加します。

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (LayerMask.LayerToName(collision.gameObject.layer) == "player")
        {
            if( GameObject.Find("GameMain").GetComponent<GameMain>().OpenLock())
            {
                Destroy(gameObject);
            }
        }
    }

スクリプトの修正が完了したら、ゲームを実際に動かして鍵を取得して、錠前にふれると消えることを確認してみましょう。
※デバッグとして、鍵を持っていない状態で錠前が消えないことも確認しましょう。

クリア演出がまで出来たらOK
この時点でstage_4のシーンを用意していないのでエラーが表示されます。

Scene 'stage_4' couldn't be loaded because it has not been added to the build settings or the AssetBundle has not been loaded.
To add a scene to the build settings use the menu File->Build Settings...

これはビルドセッティングにstage_4というシーンがないため起こります。
特に気にしなくても問題なし！

ということで、次のステージを作りたいと思います。

stage_3を複製してstage_4を作ります。
シーンファイルstage_3を右クリックしてDuplicateを選択
名前が正しく入力していると、stage_4というシーンが作られます。

stage_4が作られたら、ダブルクリックをして、シーンを開いてください
(右クリック>Openでもかまいません)

GameMainのインスペクター上のstage_idを4にする

まずはTile mapを使って、画像を参考に、ステージを作ってください
このステージでは鍵とロックは利用しません。
（削除するか、非アクティブにして画面から消しておきましょう）

今回のステージの肝になる、敵キャラを追加します。
enemy_1というスプライトをシーンビューにドラッグアンドドロップしてください


ヒエラルキーにenemy_1が追加できたら、選択してインスペクターを表示してください

Layerに[enemy]を追加して、レイヤーの設定を変更してください
Layer:enemy

Add Componentで以下２つのコンポーネントを追加してください
・RigidBody2D
・CapsuleCollider2D

RigidBody2DのConstrainsを変更します
FreezRotation Zにチェックを入れてください

CapsuleCollider2DのSizeを変更します
x=0.9 y=0.9

追加が出来たら、敵キャラの動きを実装します
スクリプト「Enemy1.cs」を追加してください

以下のコードを追加して、敵が動くようになるのを確認します。

    void FixedUpdate()
    {
        gameObject.GetComponent<Rigidbody2D>().velocity = new Vector2(
            -0.5f,
            gameObject.GetComponent<Rigidbody2D>().velocity.y);
    }

今回の追加では、左に向かって移動するだけの敵が追加されます。
スクリプトが編集できたら、ヒエラルキーのenemy_1にスクリプトを追加して、ゲームを実行してみてください

敵キャラが左に向かって歩いていることが確認できれば成功です。

次はプレイヤーが敵キャラにぶつかった判定を追加します。

------------------------------------------------------

プレイヤーがダメージを受ける処理
１．PlayerControl.csに敵と当たった状態を検出する
２．やられたときの演出をする
３．GameMainに知らせる

１．PlayerControl.csに敵と当たった状態を検出する

OnCollisionEnter2Dに以下の処理を追加

else if( layer_name == "enemy")
{
    Debug.Log("hit enemy");
    GameObject.Find("GameMain").SendMessage("OnGoal");
}

2.やられたときの受けた演出を作る
ヒエラルキーのプレイヤーを選択
Animatorウィンドで変数を追加する
Parameters
 型：bool
 名前：dead

Animationウィンドウ
Create New Clipを選択
deadという名前のアニメーションを新規に作成します
追加したアニメーションを選択した状態で、インスペクターの設定を変更します。
Loop Timeのチェックを外してください

Make Transition
idle > deadへの方向のみ

Transitionの設定
idle > dead
 Has Exit Time のチェックをはずす
 Conditionsにdeadが真の状態で遷移するように設定
アニメーションのブレンド部分を変更する。動画参照

アニメーションの編集をします。
赤い丸ボタンを押して、編集モードに切り替えます。
１秒のアニメーションでやられてしまう演出を行う
詳しくは動画で！


３．GameMainに知らせる
GameMainに以下のメソッドを追加してください

    public void OnHitEnemy()
    {
        Debug.Log("GameMain.OnHitEnemy");
        GameObject.Find("txtMessage").GetComponent<Text>().text = "GAME OVER!!!";
        GameObject.Find("Player").GetComponent<Animator>().SetBool("dead",true);
        StartCoroutine(LoadStage(3.0f, stage_id));
    }

敵が一定間隔ごとに出現する処理を作ります。

Prefabという機能を利用します。

Prefabとは、シーン内のオブジェクトを複製することが出来る機能のことです。

１．enemyのプレファブ化
２．一定間隔ごとにenemyを複製するプログラムの実装
３．シーン内に設定を行い、敵が複製されるのを確認する
４．enemyの退場処理の追加

５．ブラッシュアップ：プレイヤーキャラが落下したときにもゲームオーバーになる処理を追加してみましょう

１．enemyのプレファブ化
シーン内に存在する、enemyをドラッグアンドドロップで、プロジェクトビューの中に放り込みます
アイコンが青い箱のようなものになれば成功です。
シーン内のプレファブは不要になるので、削除してください。

２．一定間隔ごとにenemyを複製するプログラムの実装
EnemyGenerator.csを追加します。
以下のプログラムを作成してください。

public class EnemyGenerator : MonoBehaviour
{
    private float m_fTime;
    public float m_fInterval = 5.0f;
    public GameObject m_prefEnemy;

    private void Start()
    {
        m_fTime = 0.0f;
    }

    private void Update()
    {
        m_fTime += Time.deltaTime;
        if(m_fInterval < m_fTime)
        {
            Instantiate(m_prefEnemy, gameObject.transform.position, gameObject.transform.rotation);
            m_fTime -= m_fInterval;
        }       
    }
}


３．シーン内に設定を行い、敵が複製されるのを確認する

ヒエラルキーに空のゲームオブジェクトを追加します
名前を[EnemyGenerator]に変更してください
名前の変更が終わったら、同ゲームオブジェクトにEnemyGerator.csをアタッチしてください。

Positionを設定（4,6,0）
※ｘｙ座標は好きな位置で構いませんが、ｚ座標は必ず０にしてください

インスペクターの設定を行います。
Pref Enemyに、プレファブ化を行ったenemyをドラッグアンドドロップしてください。
※超重要

ここまでの設定が行えたら、ゲームを動かして、敵が一定間隔で生成されることを確認してください。


４．enemyの退場処理の追加
敵が画面外に落下した後、放ったらかしにしていると、いつまでも存在し続けてしまうので、
ここでは座標が一定以下に到達した場合、敵を削除する処理を追加します。

Enemy1.csに以下のコードを追加してください。

    void Update()
    {
        if( gameObject.transform.position.y < -7.0f)
        {
            Destroy(gameObject);
        }
    }

------------------------------------------------

次回：7月20日(月曜)13時からの予定

さらに次のステージ(stage_5)は敵が、赤ノコノコのような行動パターンを行う敵キャラの挙動を実装。



https://scratch.mit.edu/users/sakanaking/
Unityやプログラム・プログラマーに関する質問などをコメントで受け付けています。お気軽にご相談ください








